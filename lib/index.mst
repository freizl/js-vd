<html>
    <head>
        <title>{{title}}</title>
        <style>
          #modules{}
          #graph { margin-top: 10px; }
          .node:hover { cursor: pointer; }
          .node:hover ellipse { fill: grey; }
        </style>
    </head>
    <body>
        <h1>{{project}}</h1>
        <select id="modules" class="">
            <option>...</option>
            {{#topLevelKeys}}
            <option value="{{{name}}}" {{{selected}}}><span>{{{name}}}</span></option>
            {{/topLevelKeys}}
        </select>
        <input id="reverse-deps" type="checkbox" /><label>Reverse Depends</label>

        <div id="graph" class=""> </div>

        <script src="http://mdaines.github.io/viz.js/viz.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/zepto/1.1.4/zepto.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/ramda/0.13.0/ramda.min.js"></script>
        <script>
           var rawData = JSON.parse('{{{datas}}}');
           var reverseDeps = {{{reverseDeps}}};
        </script>
        <script>
          var m = $('#modules'),
             rd = $('#reverse-deps');

         m.bind('change', actionHandler);
         rd.bind('change', actionHandler);
         $('#graph').delegate('.node', 'click', function () {
             var that = $(this),
                 val = that.find('text').text();

             if (rawData[val]) {
                 $('#modules').val(val)
                              .change();
             } else {
                 $('#graph').html('<h3>ERROR: dont have module: ' + val + '</h3>');
             }

         });

         if (reverseDeps) {
             rd.prop('checked', true);
         }
         if (m.val() !== '...') {
             m.change();
         }

         function actionHandler () {
             genDiagram($('#modules').val(), $('#reverse-deps').is(':checked'));
         }

         function genDiagram (selectVal, reverseDep) {
             var treeData = rawData,
                 el = $('#graph'),
                 dots;

             el.html('<h3>LOADING...</h3>');

             if (selectVal !== '...') {
                 if (reverseDep) {
                     treeData = genDependReverseTree(treeData, selectVal);
                 }

                 dots = graphData(selectVal, treeData);

                 // Viz takes times synchronizedly !!
                 setTimeout(function () {
                     console.time('renderTree');
                     var g = Viz(dots, "svg", "dot");
                     $('#graph').html(g);
                     console.timeEnd('renderTree');
                 }, 0)

             }
         }

         function dependOf(treeData, name) {
           var getVal = R.prop(R.__, treeData),
           hasDepends = R.compose(R.contains(name), getVal),
           keys = R.keys(treeData);

           return R.filter(hasDepends, keys);
         }

         /**
         * an reversed tree with the specified @depName@ as top.
         */
         function genDependReverseTree(treeData, depName) {
             if (!genDependReverseTree.cache) {
                 genDependReverseTree.cache = {};
             }
             if (genDependReverseTree.cache[depName]) {
                 return genDependReverseTree.cache[depName]
             }
             var ds = dependOf(treeData, depName),
                 dTree = {};

             dTree[depName] = ds;

             if (R.isEmpty(ds)) {
                 return dTree;
             } else {
                 var deeperDeps = R.map(R.curry(genDependReverseTree)(treeData), ds),
                     allDeps = deeperDeps.concat(dTree),
                     result = R.mergeAll(allDeps);
                 genDependReverseTree.cache[depName] = result;
                 return result
             }
         }

         function getDep (name, treeData) {
            return R.prop(name, treeData) || R.prop('node_modules/' + name, treeData) || []
         }

         function graphData (name, treeData) {
             var nodes = [],
                 links = [];

             genNode.cache = {};
             genNode([name], nodes, links, treeData)
             return genDot(nodes, links)
         }

         function genNode (names, nodes, links, treeData) {
             R.map(function (n) {
                 if (!genNode.cache[n]){
                     var deps = getDep(n, treeData),
                         ls = R.map(function (d) {
                             var link = {}
                             link.source = n
                             link.target = d
                             return link;
                         }, deps);
                     nodes.push(n);
                     //links = links.concat(ls); ??
                     R.map(function (l) { links.push(l);}, ls);

                     genNode.cache[n] = ls;
                     genNode(deps, nodes, links, treeData)
                 }
             }, names)
         }

         function genDot (nodes, links) {
            var start = ['digraph G {'],
                end = ['}'],
                appendComma = function (x) {return '"' + x + '";'},
                reverseArrow = $('#reverse-deps').is(':checked') ? ' [dir=back]' : '';
                genLink = function (o) { return '"' + o.source + '"' + ' -> ' + '"' + o.target + '"' + reverseArrow},
                xs = R.uniq(R.map(appendComma, nodes)),
                ys = R.uniq(R.map(genLink, links))
                dots = R.reduce(R.concat, [], [start, xs, ys, end]).join('\r\n')

            return dots;
         }
        </script>
    </body>
</html>
