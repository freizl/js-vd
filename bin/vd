#!/usr/bin/env node

'use strict';

/**
 * Module dependencies
 */
var fs = require('fs'),
    version = require('../package.json').version,
    program = require('commander'),
    printResult = require(__dirname + '/../node_modules/madge/lib/output'),
    madge = require('madge'),
    jsvd = require('../lib');

program
    .version(version)
    .usage('[options] <file|dir ...>')
    .option('-f, --format <name>', 'format to parse (amd/cjs)', 'cjs')
    .option('-s, --summary', 'show summary of all dependencies')
    .option('-c, --circular', 'show circular dependencies')
    .option('-d, --depends <id>', 'show modules that depends on the given id')
    .option('-x, --exclude <regex>', 'a regular expression for excluding modules')
    .option('-t, --dot', 'output graph in the DOT language')
    .option('-i, --image <filename>', 'write graph to file as a PNG image')
    .option('-l, --layout <name>', 'layout engine to use for image graph (dot/neato/fdp/sfdp/twopi/circo)', 'dot')
    .option('-b, --break-on-error', 'break on parse errors & missing modules', false)
    .option('-n, --no-colors', 'skip colors in output and images', false)
    .option('-r, --read', 'skip scanning folders and read JSON from stdin')
    .option('-C, --config <filename>', 'provide a config file')
    .option('-R, --require-config <filename>', 'include shim dependencies and paths found in RequireJS config file')
    .option('-O, --optimized', 'if given file is optimized with r.js', false)
    .option('-N, --find-nested-dependencies', 'find nested dependencies in AMD modules', false)
    .option('-M, --main-require-module', 'name of the primary RequireJS module, if it\'s included with `require()`', '')
    .option('-j --json', 'output dependency tree in json')
    .option('-p --paths <directory>', 'additional comma separated paths to search for dependencies (CJS only)', '')
    .option('-e --extensions <list>', 'comma separated string of valid file extensions', 'js,coffee')
    .parse(process.argv);

if (!program.args.length && !program.read && !program.requireConfig) {
    console.log(program.helpInformation());
    process.exit(1);
}

var src = program.args;

// Set JSON format by default, and use the json result to generate diagram in HTML.
if (!program.dot && !program.image && !program.json) {
    program.json = true;
}

// Check config file
if (program.config && fs.existsSync(program.config)) {
    var configOptions = JSON.parse(fs.readFileSync(program.config, 'utf8'));
    // Duck punch the program with the new options
    // Config file take precedence
    for (var k in configOptions) {
        if (configOptions.hasOwnProperty(k)) {
            program[k] = configOptions[k];
        }
    }
}

// Read from standard input
if (program.read) {
    var buffer = '';
    process.stdin.resume();
    process.stdin.setEncoding('utf8');
    process.stdin.on('data', function (chunk) {
        buffer += chunk;
    });
    process.stdin.on('end', function () {
        src = JSON.parse(buffer);
        run();
    });
} else {
    run();
}

function run() {
    // Start parsing
    var res = madge(src, {
        format: program.format,
        breakOnError: program.breakOnError,
        exclude: program.exclude,
        optimized: program.optimized,
        requireConfig: program.requireConfig,
        mainRequireModule: program.mainRequireModule,
        paths: program.paths ? program.paths.split(',') : undefined,
        extensions: program.extensions.split(',').map(function (str) { return '.' + str; }),
        findNestedDependencies: program.findNestedDependencies
    });

    // Ouput summary
    if (program.summary) {
        printResult.summary(res.obj(), {
            colors: program.colors,
            output: program.output
        });

        // Output circular dependencies
    } else if (program.circular) {
        printResult.circular(res.circular(), {
            colors: program.colors,
            output: program.output
        });

        // Output module image
    } else if (program.image) {
        res.image({
            colors: program.colors,
            layout: program.layout,
            fontFace: program.font,
            fontSize: program.fontSize,
            imageColors: program.imageColors
        }, function (image) {
            fs.writeFile(program.image, image, function (err) {
                if (err) {
                    throw err;
                }
            });
        });

        // Output DOT
    } else if (program.dot) {
        process.stdout.write(res.dot());
        // Output JSON
    } else if(program.json || program.depends) {
        jsvd(res.tree, program);
    } else {
        // Output text (default)
        printResult.list(res.obj(), {
            colors: program.colors,
            output: program.output
        });
    }
}
